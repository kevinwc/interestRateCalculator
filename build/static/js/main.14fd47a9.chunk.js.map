{"version":3,"sources":["features/calculator/Calculator.module.css","features/calculator/calculatorSlice.js","features/calculator/Calculator.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","calculatorSlice","createSlice","name","initialState","total","reducers","calculateInterest","state","action","payload","principalValue","interestValue","yearsValue","actions","selectInterestTotal","calculator","Calculator","totalInterest","useSelector","dispatch","useDispatch","useState","principal","setPrincipal","interest","setInterest","years","setYears","Number","className","styles","row","textbox","aria-label","value","onChange","e","target","button","onClick","App","store","configureStore","reducer","calculatorReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,IAAM,wBAAwB,MAAQ,0BAA0B,OAAS,2BAA2B,QAAU,8B,6HCKnHC,EAAkBC,YAAY,CACzCC,KAAM,aACNC,aANmB,CACnBC,MAAO,GAOPC,SAAU,CAERC,kBAAmB,SAACC,EAAOC,GAAY,IAAD,EACkBA,EAAOC,QAArDC,EAD4B,EAC5BA,eAAgBC,EADY,EACZA,cAAeC,EADH,EACGA,WAEvCL,EAAMH,MAAQM,GAAkB,EAAIC,EAAgBC,OAK3CN,EAAsBN,EAAgBa,QAAtCP,kBAKFQ,EAAsB,SAACP,GAAD,OAAWA,EAAMQ,WAAWX,OAEhDJ,IAAf,Q,uBCtBO,SAASgB,IACd,IAAIC,EAAgBC,YAAYJ,GAC1BK,EAAWC,cAFU,EAIOC,mBAAS,GAJhB,mBAIpBC,EAJoB,KAITC,EAJS,OAKKF,mBAAS,GALd,mBAKpBG,EALoB,KAKVC,EALU,OAMDJ,mBAAS,GANR,mBAMpBK,EANoB,KAMbC,EANa,KAQrBjB,EAAiBkB,OAAON,IAAc,EACtCX,EAAgBiB,OAAOJ,IAAa,EACpCZ,EAAagB,OAAOF,IAAU,EAEpC,OACE,gCACE,sBAAKG,UAAWC,IAAOC,IAAvB,uBAEE,uBACEF,UAAWC,IAAOE,QAClBC,aAAW,uBACXC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAAaa,EAAEC,OAAOH,UAN3C,YASE,uBACEL,UAAWC,IAAOE,QAClBC,aAAW,2BACXC,MAAOV,EACPW,SAAU,SAACC,GAAD,OAAOX,EAAYW,EAAEC,OAAOH,UAb1C,SAgBE,uBACEL,UAAWC,IAAOE,QAClBC,aAAW,mBACXC,MAAOR,EACPS,SAAU,SAACC,GAAD,OAAOT,EAASS,EAAEC,OAAOH,UAErC,wBACEL,UAAWC,IAAOQ,OAClBC,QAAS,kBACPpB,EACEb,EAAkB,CAAEI,iBAAgBC,gBAAeC,iBAJzD,mCAWF,qBAAKiB,UAAWC,IAAOC,IAAvB,SACE,uBAAMF,UAAWC,IAAOI,MAAxB,6BAAgDjB,U,MCvCzCuB,MAVf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAACb,EAAD,SCLKyB,EAAQC,YAAe,CAClCC,QAAS,CACP5B,WAAY6B,KCOIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.14fd47a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Calculator_row__tTgOH\",\"value\":\"Calculator_value__2eBbK\",\"button\":\"Calculator_button__28Whw\",\"textbox\":\"Calculator_textbox__3aib1\"};","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  total: 0,\n};\n\nexport const calculatorSlice = createSlice({\n  name: \"calculator\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    calculateInterest: (state, action) => {\n      const { principalValue, interestValue, yearsValue } = action.payload;\n\n      state.total = principalValue * (1 + interestValue * yearsValue);\n    },\n  },\n});\n\nexport const { calculateInterest } = calculatorSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectInterestTotal = (state) => state.calculator.total;\n\nexport default calculatorSlice.reducer;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectInterestTotal, calculateInterest } from \"./calculatorSlice\";\nimport styles from \"./Calculator.module.css\";\n\nexport function Calculator() {\n  let totalInterest = useSelector(selectInterestTotal);\n  const dispatch = useDispatch();\n\n  const [principal, setPrincipal] = useState(0);\n  const [interest, setInterest] = useState(0);\n  const [years, setYears] = useState(0);\n\n  const principalValue = Number(principal) || 0;\n  const interestValue = Number(interest) || 0;\n  const yearsValue = Number(years) || 0;\n\n  return (\n    <div>\n      <div className={styles.row}>\n        Principal:\n        <input\n          className={styles.textbox}\n          aria-label=\"Set principal amount\"\n          value={principal}\n          onChange={(e) => setPrincipal(e.target.value)}\n        />\n        Interest:\n        <input\n          className={styles.textbox}\n          aria-label=\"Set interest rate amount\"\n          value={interest}\n          onChange={(e) => setInterest(e.target.value)}\n        />\n        Years:\n        <input\n          className={styles.textbox}\n          aria-label=\"Set years amount\"\n          value={years}\n          onChange={(e) => setYears(e.target.value)}\n        />\n        <button\n          className={styles.button}\n          onClick={() =>\n            dispatch(\n              calculateInterest({ principalValue, interestValue, yearsValue })\n            )\n          }\n        >\n          Calculate Interest\n        </button>\n      </div>\n      <div className={styles.row}>\n        <span className={styles.value}>Total Interest: {totalInterest}</span>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Calculator } from \"./features/calculator/Calculator\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Calculator />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport calculatorReducer from \"../features/calculator/calculatorSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    calculator: calculatorReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}